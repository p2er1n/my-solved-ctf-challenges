# x1 = 0
# x2 = 0x12
# x3 = 0
# x4 = 0
# instr = [ 0xf5, 0xf1, 0xe1, 0x00, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x20, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x01, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x21, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x02, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x22, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x03, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x23, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x04, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x24, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x05, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x25, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x06, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x26, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x07, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x27, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x08, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x28, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x09, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x29, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x0a, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x2a, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x0b, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x2b, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x0c, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x2c, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x0d, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x2d, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x0e, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x2e, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x0f, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x2f, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x10, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x30, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x11, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x31, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x12, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x32, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x13, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x33, 0x00, 0x00, 0x00, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0xf1, 0xe1, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x01, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x01, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x02, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x01, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x02, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x03, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x02, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x03, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x04, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x03, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x04, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x05, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x04, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x05, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x06, 0x00, 0x00, 0x00, 0xf2, 0xf1, 0xe4, 0x05, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x06, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x07, 0x00, 0x00, 0x00, 0xf1, 0xe3, 0x08, 0x00, 0x00, 0x00, 0xf1, 0xe5, 0x0c, 0x00, 0x00, 0x00, 0xf6, 0xf7, 0xf1, 0xe4, 0x06, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x07, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x08, 0x00, 0x00, 0x00, 0xf1, 0xe3, 0x09, 0x00, 0x00, 0x00, 0xf1, 0xe5, 0x0c, 0x00, 0x00, 0x00, 0xf6, 0xf7, 0xf1, 0xe4, 0x07, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x08, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x09, 0x00, 0x00, 0x00, 0xf1, 0xe3, 0x0a, 0x00, 0x00, 0x00, 0xf1, 0xe5, 0x0c, 0x00, 0x00, 0x00, 0xf6, 0xf7, 0xf1, 0xe4, 0x08, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x0d, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x13, 0x00, 0x00, 0x00, 0xf8, 0xf1, 0xe4, 0x0d, 0x00, 0x00, 0x00, 0xf1, 0xe7, 0x13, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x0e, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x12, 0x00, 0x00, 0x00, 0xf8, 0xf1, 0xe4, 0x0e, 0x00, 0x00, 0x00, 0xf1, 0xe7, 0x12, 0x00, 0x00, 0x00, 0xf1, 0xe1, 0x0f, 0x00, 0x00, 0x00, 0xf1, 0xe2, 0x11, 0x00, 0x00, 0x00, 0xf8, 0xf1, 0xe4, 0x0f, 0x00, 0x00, 0x00, 0xf1, 0xe7, 0x11, 0x00, 0x00, 0x00, 0xf4 ]
# pc = 0
# input_ = [0] * 512
# def vm_eval():
#     global pc,x1,x2,x3,x4
#     idx = instr[pc+2] | instr[pc+3]<<8 | instr[pc+4]<<16 | instr[pc+5]<<24
#     subinstr = instr[pc+1]
#     if subinstr == 0xe1:
#         print("x1 <- input", idx)
#         x1 = int(input_[idx])
#     elif subinstr == 0xe2:
#         print("x2 <- input", idx)
#         x2 = int(input_[idx])
#     elif subinstr == 0xe3:
#         print("x3 <- input", idx)
#         x3 = int(input_[idx])        
#     elif subinstr == 0xe4:
#         print("input <- x1", idx)
#         try:
#             input_[idx] = chr(x1)
#         except IndexError as e:
#             print(idx)
#             raise e
#     elif subinstr == 0xe5:
#         print("x4 <- input", idx)
#         x4 = int(input_[idx])
#     elif subinstr == 0xe7:
#         print("input <- x2", idx)
#         try:
#             input_[idx] = chr(x2)
#         except IndexError as e:
#             print(idx)
#             raise e
#     else:
#         print("unimpossible!",pc)
#         import sys
#         sys.exit(-1)
#     pc += 6
# def vm_xor():
#     print("x1 = x2 ^ x1")
#     global x1,x2,pc
#     x1 = x2 ^ x1
#     pc += 1
# def vm_mul():
#     print("x1 = x1 * x4")
#     global x1,x4,pc
#     x1 *= x4
#     pc += 1
# def input_func():
#     print("input")
#     global input_, pc
#     input_1 = [c for c in input()]
#     if len(input_1) != 0x15:
#         print("WRONG!")
#         import sys
#         sys.exit(-1)
#     for i in range(len(input_1)):
#         input_[i] = input_1[i]
#     pc += 1
# def vm_nop():
#     print("nop")
#     global pc
#     pc += 1
# def vm_swap():
#     print("swap x1 x2")
#     global x1, x2, pc
#     x1, x2 = x2, x1
#     pc += 1
# def vm_math():
#     print("x1 = 3*x1 + 2*x2 + x3")
#     global x1, x2, x3, pc
#     x1 = 3*x1 + 2*x2 + x3
#     pc += 1
# def dispatch():
#     global pc
#     if instr[pc] == 0xf1:
#         vm_eval()
#     elif instr[pc] == 0xf2:
#         vm_xor()
#     elif instr[pc] == 0xf5:
#         input_func()
#     elif instr[pc] == 0xf4:
#         vm_nop()
#     elif instr[pc] == 0xf7:
#         vm_mul()
#     elif instr[pc] == 0xf8:
#         vm_swap()
#     elif instr[pc] == 0xf6:
#         vm_math()
        
# def vm_loop():
#     global pc
#     pc = 0
#     while instr[pc] != 0xf4:
#         dispatch()

# # by obversing the vm execucation flow, we can find that it allways executes the same flow
# # x1 = input[idx]
# # x1 ^= x2
# # input[0x20+idx] = x1
# # so,here is the answer
# # message above is not true (

# #here is the right answer!! it has to be! :(
sec = [ 0x69, 0x45, 0x2a, 0x37, 0x09, 0x17, 0xc5, 0x0b, 0x5c, 0x72, 0x33, 0x76, 0x33, 0x21, 0x74, 0x31, 0x5f, 0x33, 0x73, 0x72 ]
# instr = instr[288:]
# pc = 0
# vm_loop()

# ok we can now find the encrypt flow!!
#encrypt 0-5 with their responding next char by xor,
#encrypt 6-8 with their next two chars and the 12th char by some math, x1 = (x1*3 + x2*2 + x3)*x4
#and then just swap 13,19 14,18 15,17

for i in [15, 14, 13]:
    sec[i], sec[32-i] = sec[32-i], sec[i]

for i in [8, 7, 6]:
    """
    x1 <- input 8
    x2 <- input 9
    x3 <- input 10
    x4 <- input 12
    x1 = 3*x1 + 2*x2 + x3
    x1 = x1 * x4
    input <- x1 8 when stroing the data back to input, it trims it to one byte!!
    """
    x1 = sec[i]
    x2 = sec[i+1]
    x3 = sec[i+2]
    x4 = sec[12]

    for j in range(128):
        if (j*3 + x2*2 + x3)*x4 & 0xff == sec[i]:
            x1 = j
            break
    sec[i] = x1

# sec[6] = 118
# sec[7] = 51
# sec[8] = 95

for i in range(5, -1, -1):
    """
    x1 <- input 5
    x2 <- input 6
    x1 = x2 ^ x1
    input <- x1 5
    """
    x1 = sec[i]
    x2 = sec[i+1]

    x1 ^= x2

    sec[i] = x1

for i in range(len(sec)):
    try:
        sec[i] = chr(sec[i])
    except ValueError:
        continue
print("".join(sec))
